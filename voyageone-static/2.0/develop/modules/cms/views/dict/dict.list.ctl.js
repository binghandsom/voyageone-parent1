// Generated by CoffeeScript 1.9.3

/*
  @Name: DictListController
  @Date: 2015-09-15 13:29:15

  @User: Jonas
  @Version: 0.0.1
 */
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['modules/cms/views/dict/dict.value.ctl'], function(cmsModule) {
  return cmsModule.controller('DictListController', (function() {
    _Class.$inject = ['$scope', '$compile', '$translate', 'DTOptionsBuilder', 'DTColumnBuilder', 'DictService', '$location', 'notify','confirm', '$modal'];
    var m_dictService;
    var m_notify;
    var m_dtDict;
    function _Class($scope, $compile, $translate, DTOptionsBuilder, DTColumnBuilder, DictService, $location, notify, vConfirm,$modal) {
      this.$translate = $translate;
      m_dictService = DictService;
      this.$location = $location;
      this.$modal = $modal;
      m_notify = notify;
      this.vConfirm = vConfirm;
      this.dtGetDict = bind(this.dtGetDict, this);
      this.dtDict = {
        options: DTOptionsBuilder.newOptions().withOption('processing', true).withOption('serverSide', true).withOption('ordering', false).withOption('ajax', this.dtGetDict).withOption('createdRow', (function(_this) {
          return function(tr, row) {
            var rowScope;
            rowScope = $scope.$new();
            rowScope.$row = row;
            return $compile(angular.element(tr).attr('ng-class', '{"prop-require": $row.is_required, "prop-ignore": $row.is_ignore}'))(rowScope);
          };
        })(this)).withDataProp('data').withPaginationType('full_numbers'),
        columns: [
          DTColumnBuilder.newColumn('name', this.$translate('TXT_PROMOTION_NAME')).withClass('col-sm-2'), DTColumnBuilder.newColumn('value', this.$translate('TXT_TH_VALUE')).withClass('col-sm-8').renderWith(function() {
            return '{{$row.value}}';
          }), DTColumnBuilder.newColumn('', this.$translate('TXT_ACTIONS')).withClass('col-sm-2').renderWith(function() {
            return '<button ng-click="vm.editItem($row)" class="btn btn-success btn-sm"><i class="fa fa-pencil"></i></button>&nbsp;' + '<button ng-click="vm.delItem($row)" class="btn btn-danger btn-sm"><i class="fa fa-trash-o"></i></button>&nbsp;' + '<button class="btn btn-success btn-sm" ng-click="vm.editValue($row)"> <i class="glyphicon glyphicon-edit"></i> </button>';
          })
        ],
        instance: null
      };
      m_dtDict = this.dtDict;
    }

    _Class.prototype.dtGetDict = function(data, callback) {
      return m_dictService.dtGetDict(data).then(function(res) {
        return callback(res.data);
      });
    };

    _Class.prototype.addItem = function() {
      return this.editItem({});
    };

    _Class.prototype.editItem = function(item) {
      sessionStorage.dict = angular.toJson({
        item: item
      });
      return this.$location.path('/cms/dict/item');
    };

    _Class.prototype.delItem = function(item) {
      this.vConfirm('TXT_MSG_IS_DELETE','').result.then(function() {
        return m_dictService.delDict(item).then((function(_this) {
          return function(res) {
            if (res.data) {
              m_notify.success('TXT_MSG_DELETE_SUCCESS');
              return m_dtDict.instance.reloadData();
            } else {
              return m_notify.warning('TXT_MSG_DELETE_SUCCESS');
            }
          };
        })(this));
      }, function() {
      })
    };

    _Class.prototype.editValue = function(word) {
      return this.openValue(word, function(res) {
        word.value = res.value;
        m_dictService.setDict(word).then((function(_this) {
          return function(res) {
            if (res) {
              return _this.alert('TXT_MSG_SAVE_SUCCESS').result.then(function() {
                return _this.cancel();
              });
            }
          };
        }));
        return word.value = res.value;
      });
    };

    _Class.prototype.openValue = function(word, callback) {
      return this.$modal.open({
        templateUrl: 'modules/cms/views/dict/dict.value.tpl.html',
        controller: 'DictValueController',
        controllerAs: 'vm',
        resolve: {
          masterProps: (function(_this) {
            return function() {
              return "";
            };
          })(this),
          cmsValues: (function(_this) {
            return function() {
              return "";
            };
          })(this),
          dictList: (function(_this) {
            return function() {
              return "";
            };
          })(this),
          word: function() {
            return word;
          }
        }
      }).result.then(callback);
    };
    return _Class;

  })());
});
