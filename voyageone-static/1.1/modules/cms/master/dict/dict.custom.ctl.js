// Generated by CoffeeScript 1.9.3

/*
  @Name: DictCustomController
  @Date: 2015-09-15 16:06:34

  @User: Jonas
  @Version: 0.0.1
 */
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(['modules/cms/cms.module', 'modules/cms/master/dict/dict.service'], function(cmsModule) {
  return cmsModule.controller('DictCustomController', (function() {
    _Class.$inject = ['$scope', 'vAlert', '$translate', 'DictService'];

    function _Class($scope, alert, $translate, DictService) {
      this.alert = alert;
      this.$translate = $translate;
      this.DictService = DictService;
      this.onEditCustom = bind(this.onEditCustom, this);
      this.onAddCustom = bind(this.onAddCustom, this);
      this.openValue = function(word, callback) {
        return $scope.$parent.vm.openValue(word, callback);
      };
      this.DictService.customs().then((function(_this) {
        return function(res) {
          return _this.customs = res.data;
        };
      })(this));
      $scope.$on('custom.add', this.onAddCustom);
      $scope.$on('custom.edit', this.onEditCustom);
      this.emit = function(name, msg) {
        return $scope.$emit(name, msg);
      };
    }

    _Class.prototype.onAddCustom = function() {
      this.editing = false;
      this.customValue = {
        type: 'CUSTOM',
        value: {
          moduleName: '',
          userParam: {}
        }
      };
      return this.customBody = this.customValue.value;
    };

    _Class.prototype.onEditCustom = function(event, editingCustom) {
      this.editing = true;
      this.customValue = editingCustom;
      if (!this.customValue || !this.customValue.value) {
        this.alert('CMS_MSG_DICT_UN_VALID_CUS');
        this.cancel();
        return;
      }
      this.customBody = this.customValue.value;
      return this.custom = _.find(this.customs, (function(_this) {
        return function(obj) {
          return obj.word_name === _this.customBody.moduleName;
        };
      })(this));
    };

    _Class.prototype.editing = false;

    _Class.prototype.custom = null;

    _Class.prototype.customValue = null;

    _Class.prototype.customBody = null;

    _Class.prototype.cancel = function() {
      return this.emit('custom.cancel');
    };

    _Class.prototype.setParam = function(param) {
      return this.openValue(null, (function(_this) {
        return function(val) {
          return _this.customBody.userParam[param.param_name] = {
            ruleWordList: [val]
          };
        };
      })(this));
    };

    _Class.prototype.saveCustom = function() {
      var unValidParamName;
      if (!this.custom) {
        this.alert('CMS_MSG_DICT_NO_CUS');
        return;
      }
      unValidParamName = this.checkParam();
      if (unValidParamName) {
        this.alert({
          id: 'CMS_MSG_DICT_CUS_NO_VALUE',
          values: {
            unValidParamName: unValidParamName
          }
        });
        return;
      }
      this.customBody.moduleName = this.custom.word_name;
      return this.emit('custom.save', {
        editing: this.editing,
        custom: this.customValue
      });
    };

    _Class.prototype.checkParam = function() {
      var i, len, p, params, ref, val;
      params = this.customBody.userParam;
      ref = this.custom.params;
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        val = params[p.param_name];
        if (!val || !val.ruleWordList || !val.ruleWordList.length) {
          return p.param_name;
        }
      }
      return null;
    };

    return _Class;

  })());
});
